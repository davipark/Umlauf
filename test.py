txt = ">NM_020289.2 Mus musculus olfactory receptor 544 (Olfr544), mRNA GACTTGACCAGTCTTTACTTCCCCTGCCTGTGTGAGTCCTGAAATGCTGTAGTTAATGTCTACACCCAGT CCAGCCTGGTGAGGCTGGGGCAGGTCCTAGCAGGGCCTTTCAGGGACTGAACCCCGGCATCCTGCCCCTC CCCTCTCCCTGGAGCCTCCCCAAGCCCTCAGGCGTCATGTCAGGGTGGAGCAATGGCACCTACAATGAGT CCTACACCAGCTTCCTCCTCATGGGCTTCCCAGGGATGCAGGAAGCCAGAGCCCTCCTGGTGCTGCCCTT CCTCAGCCTCTACCTGGTGATCCTCTTCACCAATGCCCTGGTCATCCACACGGTGGCATCCCAGCGCAGC CTGCACCAGCCCATGTACCTGCTCATTGCCCTGCTCCTGGCTGTCAATATCTGCGCTGCCACCACCGTGG TGCCCCCCATGCTCTTCAGCTTCTCCACACGCTTCAACCGCATCTCCCTCCCTCGATGCTTGGGACAGAT GTTCTGCATCTACTTCCTTATTGTCTTTGACTGCAACATCCTCCTGGTCATGGCTCTAGATCGCTATGTG GCTATCTGCTACCCTCTCCGCTACCCAGAAATAGTGACAGGACAGTTACTGGCTGGTCTGGTGGTGCTGG CAGTCACCAGGAGCACATGCATTGTTGCTCCAGTGGTGGTGCTGGCCTCGCGGGTTCGCTTCTGTCGCTC AGATGTGATCCGCCACTTTGCCTGTGAGCACATGGCCCTGATGAAGCTTTCCTGTGGGGACATCTCGCTG AATAAGACGGTGGGACTCACTGTTCGCATCTTCAACCGAGTCCTGGATATGCTCCTGTTAGGTGCCTCCT ACTCCCGCATCATCCATGCTGCCTTCAGGATCTCATCAGGTGGAGCACGGTCCAAAGCCCTGAACACCTG TGGCTCCCACCTGCTGGTCATCTTCACTGTCTACTCCTCCACCATGTCCTCATCCATTGTCTACCGTGTG GCGCGCACTGCCTCCCAAGATGTGCACAACTTGCTCAGTGCTTTCTATCTGTTGCTCCCGTGTCTGGTCA ACCCCATCATCTACGGGGCCAGAACCAAGGAAATCAGGCAGCACCTGGTAGCTCTGTTCCAAAGGACTCA GCAACAGGTCTTCACTGAGAAGCCCCAGTCCCTGCCCTCGAATAGAGAGCTTCCTGGATGA >NM_010983.2 Mus musculus olfactory receptor 2 (Olfr2), mRNA AGTTCTCTACTGACTGCTAACTTGGTCTTGATGCTAAAGGAATTGTGCTAGTCTTACTCAAAGAGAGTTA GCTGAACTTTCAGAATCAATGACCTGTTCAGTACTCACATCATCCAGGACCTACTTCATGTCCTGATATC TAGCTCATCGAACAGCTGCTATTAATCACACCTACCACAAGCATTGCAGAGAATAGTCACCAAGCTAGAT TCTTGCTGCTGCTTTTATAAGATACCTTGGTCTATCTCTTGAACAAGACTGAAAACATGGAGCGAAGGAA CCACACTGGGAGAGTGAGTGAATTTGTGTTGCTGGGTTTCCCAGCTCCTGCCCCACTGCGGGCACTACTA TTTTTCCTTTCTCTGTTGGCCTACGTGTTGGTGCTGACTGAAAACATACTCATCATTACAGCAATTAGGA ACCACCCCACCCTCCACAAACCCATGTATTTTTTCTTGGCTAATATGTCATTCCTGGAGATTTGGTATGT CACTGTTACGATTCCTAAGATGCTTGCTGGCTTCATTGGTTCCGAGGAGAATCATGGACAGCTGATCTCC TTTGAGGCATGCATGACACAGCTCTACTTTTTCCTAGGCTTGGGTTGCACAGAGTGTGTCCTTCTTGCTG TCATGGCCTATGACCGCTATGTGGCCATCTGTCACCCACTCCACTATCCTGTCATTGTCAGTAGCCGGCT ATGTGTGCAGATGGCAGCTGGATCCTGGGCTGGAGGTTTTGGTATCTCCATGGTTAAAGTTTTCCTCATT TCTCGCCTGTCTTACTGTGGCCCCAACACCATCAACCACTTTTTCTGTGATGTTTCTCCATTGCTCAACT TGTCATGCACTGACATGTCCACAGCAGAGCTTACAGACTTTATCCTGGCCATTTTTATTCTGCTGGGGCC ACTCTCTGTCACTGGGGCTTCCTATATGGCCATCACAGGTGCAGTGATGCGCATCCCCTCAGCTGCTGGC CGCCATAAGGCCTTTTCAACCTGTGCCTCCCACCTCACTGTTGTGATTATCTTCTATGCAGCCAGTATTT TCATCTATGCCAGGCCTAAGGCACTCTCAGCTTTTGACACCAACAAGCTGGTCTCTGTACTCTACGCTGT CATTGTACCATTGCTCAATCCCATCATCTACTGCTTGCGCAATCAAGAAGTCAAAAAAGCCCTACGTCGC ACTCTGCACCTGGCCCAAGGCCAGGACGCCAATACCAAGAAATCCAGCAGAGATGGTTAG >NM_207665.1 Mus musculus olfactory receptor 1537 (Olfr1537), mRNA ATGGAGGACATGGCAGCAGGAAACCACTGCACAGTGACTGAGTTCTTCTTAGCTGGGCTCTCAGAGAAGC CAGAACTCCAGCTGCCACTCTTCCTGCTCTTCACAGGAATCTATCTGATCACCATGGCAGGGAACCTGGG CATGATCACACTGATTGGGCTCAGTTCTCATCTGCACACACCCATGTACTATTTCCTCAGCAGTCTGTCC TTCATTGACTTCTGTCAGTCTACAGTTGTCATTCCTAAAATGCTCGTGAGCTTTCTGACAGAGATGAACA TCATTTCCTACTCTGAATGCATGGCTCAGCTCTACTTCTTCCTCACTTTTGGTATTGCAGAGTGCTACAC ATTAGCTGCAATGGCCTATGACCGATATGTTGCTATTTGTAACCCCTTGCTTTACAATGTAACCATGTCC TATCAGATTTACAGTTCTCTGATTTCAGGGGTATATATTTTTGCTGTGATCTGTTCATCCTTTAACACTG GCTTCATGCTTAGGACTCAGTTCTGCAATTTAGATGTGATTAACCACTATTTCTGTGATCTTCTTCCCCT CTTGAATCTTGCATCCTCTAATACCTACATCAATGAAATATTGATTCTATTTTTTGCTACACTGAATTCA TTTGTCCCAGTGCTGACCATTATTACTTCCTACATCTTCATTATTGTCACCATCCTCTCCATTCACTCCA GGGAGGGCAAGTTCAAAGCTTTTAGTACTTGTAGTACCCACATCTCTGCTGTTGCTATCTTCTATGGTTC AGGTGCATTCACGTATTTACAGCCCTCATCACTGAATTCTATGGGCCAAGCAAAAGTGTCCTCTGTGTTT TATACTACTGTTGTACCCATGCTGAACCCCTTGATCTACAGCCTGAGGAATAAGGATGTCAGTATTGCAC TGAAAAAAATACTTGAAAGAAAAAAATTCATGTAA"
txt = txt.replace("mRNA", "")
txt = txt.replace("cDNA", "")
txt = txt.replace(" ", "")

#splits txt into list by > symbol
d = ">"
shitlist = [d+e for e in txt.split(d) if e]

#print(shitlist)

#
shiplist = []

f = ""
for phrase in shitlist:
    for n in range(len(phrase)):
        if phrase[n] == "T":
            if phrase[n+1] == "T" or phrase[n+1] == "A" or phrase[n+1] == "G" or phrase[n+1] == "C":
                f = "T"
                shiplist.extend(f+g for g in phrase.split(f,1) if g)
                break
        elif phrase[n] == "A":
            if phrase[n+1] == "T" or phrase[n+1] == "A" or phrase[n+1] == "G" or phrase[n+1] == "C":
                f = "A"
                shiplist.extend(f+g for g in phrase.split(f,1) if g)
                break
        elif phrase[n] == "G":
            if phrase[n+1] == "T" or phrase[n+1] == "A" or phrase[n+1] == "G" or phrase[n+1] == "C":
                f = "G"
                shiplist.extend(f+g for g in phrase.split(f,1) if g)
                break
        elif phrase[n] == "C":
            if phrase[n+1] == "T" or phrase[n+1] == "A" or phrase[n+1] == "G" or phrase[n+1] == "C":
                f = "C"
                shiplist.extend(f+g for g in phrase.split(f,1) if g)
                break

#nana contains prefixes, popo contains gene sequences
nana = []
popo = []

for i in range(len(shiplist)):
    if i%2 == 0:
        nana.append(shiplist[i])
    else:
        popo.append(shiplist[i])

with open("sequences.txt", "w") as text_file:
    for phrase in popo:
        text_file.write(phrase + "\n")

#slice top 28
shimlist = []

for sequence in popo:
    shimlist.append(sequence[:20])

with open("top20.txt", "w") as text_file:
    for phrase in shimlist:
        text_file.write(phrase + "\n")

dimlist = []
for sequence in popo:
    dimlist.append(sequence[-30:])

denimlist = []
for phrase in dimlist:
    denimlist.append(phrase[::-1])

khakilist = []
def complement(seq):
    """Returns a complement DNA sequence"""
    complement_dict = {'A': 'T', 'C': 'G', 'T': 'A', 'G': 'C'}
    seq_list = list(seq)
    seq_list = [complement_dict[base] for base in seq_list]
    khakilist.append(''.join(seq_list))

for phrase in denimlist:
    complement(phrase)


with open("testbot3.txt", "w") as text_file:
    for phrase in khakilist:
        tempA = 0
        tempG = 0
        tempC = 0
        tempT = 0
        for n in range(len(phrase)):
            if phrase[n] == "T":
                tempT+= 1
            elif phrase[n] == "A":
                tempA+=1
            elif phrase[n] == "G":
                tempG+=1
            elif phrase[n] == "C":
                tempC+=1
            formula = 64.9 + 41 * (tempG + tempC - 16.4) / (tempA + tempG + tempC + tempT)
        text_file.write(phrase + " " + str(formula) + "\n" + "\n")
